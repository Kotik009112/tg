import telebot
import os
import re
from datetime import datetime

BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID_TO_FORWARD = os.environ.get("CHAT_ID_TO_FORWARD")
if CHAT_ID_TO_FORWARD:
    CHAT_ID_TO_FORWARD = str(CHAT_ID_TO_FORWARD)

ALLOWED_USERNAMES_STR = os.environ.get("ALLOWED_USERNAMES", "")
ALLOWED_USERNAMES = [username.lower() for username in ALLOWED_USERNAMES_STR.split(",")]

ALLOWED_CHAT_TYPES = ['private']

bot = telebot.TeleBot(BOT_TOKEN)

user_ratings = {}
user_reviews = {}
accepted_helps = {}

def get_user_rating(username):
    return user_ratings.get(username, 0)

def add_review(username, review_text, rating):
    if username not in user_reviews:
        user_reviews[username] = []
    user_reviews[username].append({"text": review_text, "rating": rating})

def rating_to_stars(rating):
    if rating == 0:
        return "–Ω–µ—Ç"
    return "‚≠ê" * rating

def is_allowed_user(username):
    return username.lower() in ALLOWED_USERNAMES

def is_allowed_chat(chat_type):
    return chat_type in ALLOWED_CHAT_TYPES

def validate_phone(phone):
    phone = re.sub(r"\D", "", phone)
    if not phone.startswith(('7', '8')):
        return "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7 –∏–ª–∏ 8."
    if not phone.isdigit():
        return "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä."
    return None

def validate_dates(dates):
    match = re.match(r"(\d{2}\.\d{2}\.\d{4}) - (\d{2}\.\d{2}\.\d{4})", dates)
    if not match:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì"
    try:
        date1 = datetime.strptime(match.group(1), "%d.%m.%Y")
        date2 = datetime.strptime(match.group(2), "%d.%m.%Y")
        if date1 > date2:
            return "–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ç–æ—Ä–æ–π."
    except ValueError:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì"
    return None

def validate_fio(fio):
    parts = fio.split()
    if len(parts) != 3:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
    return None

@bot.message_handler(commands=['start'])
def start(message):
    if not is_allowed_chat(message.chat.type):
        bot.reply_to(message, "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = telebot.types.KeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
    keyboard.add(button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
def send_form(message):
    if not is_allowed_chat(message.chat.type):
        bot.reply_to(message, "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return

    user = message.from_user
    if user.username is None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à username (–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @):")
        bot.register_next_step_handler(message, get_custom_username)
    else:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
        bot.register_next_step_handler(msg, get_full_name)

def get_custom_username(message):
    username = message.text
    if not username.startswith('@'):
        bot.send_message(message.chat.id, "Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à username:")
        bot.register_next_step_handler(message, get_custom_username)
        return

    user_ratings[message.from_user.id] = {'custom_username': username}
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
    bot.register_next_step_handler(msg, get_full_name)

def get_full_name(message):
    fio = message.text
    error_message = validate_fio(fio)
    if error_message:
        bot.send_message(message.chat.id, error_message)
        bot.register_next_step_handler(message, get_full_name)
        return

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    finalist_button = telebot.types.KeyboardButton("–§–∏–Ω–∞–ª–∏—Å—Ç")
    semifinalist_button = telebot.types.KeyboardButton("–ü–æ–ª—É—Ñ–∏–Ω–∞–ª–∏—Å—Ç")
    winner_button = telebot.types.KeyboardButton("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å")
    keyboard.add(finalist_button, semifinalist_button, winner_button)

    msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, get_status, full_name=fio)

def get_status(message, full_name):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    season1 = telebot.types.KeyboardButton("1")
    season2 = telebot.types.KeyboardButton("2")
    season3 = telebot.types.KeyboardButton("3")
    season4 = telebot.types.KeyboardButton("4")
    season5 = telebot.types.KeyboardButton("5")
    keyboard.add(season1, season2, season3, season4, season5)

    msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞ —É—á–∞—Å—Ç–∏—è (–æ—Ç 1 –¥–æ 5):", reply_markup=keyboard)
    bot.register_next_step_handler(msg, get_season, full_name=full_name, status=message.text)

def get_season(message, full_name, status):
    msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: 79141234567):", reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, get_phone, full_name=full_name, status=status, season=message.text)

def get_phone(message, full_name, status, season):
    phone = message.text
    error_message = validate_phone(phone)
    if error_message:
        bot.send_message(message.chat.id, error_message)
        bot.register_next_step_handler(message, get_phone, full_name=full_name, status=status, season=season)
        return

    msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Å—Ç–æ–ª–∏—Ü–µ (–ø—Ä–∏–º–µ—Ä: 01.01.2024 - 15.01.2024):")
    bot.register_next_step_handler(msg, get_dates, full_name=full_name, status=status, season=season, phone=phone)

def get_dates(message, full_name, status, season, phone):
    dates = message.text
    error_message = validate_dates(dates)
    if error_message:
        bot.send_message(message.chat.id, error_message)
        bot.register_next_step_handler(message, get_dates, full_name=full_name, status=status, season=season, phone=phone)
        return

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    meeting_button = telebot.types.KeyboardButton("–í—Å—Ç—Ä–µ—á–∞")
    logistics_button = telebot.types.KeyboardButton("–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã")
    hotel_button = telebot.types.KeyboardButton("–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã")
    routes_button = telebot.types.KeyboardButton("–ú–∞—Ä—à—Ä—É—Ç—ã")
    culture_button = telebot.types.KeyboardButton("–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
    own_button = telebot.types.KeyboardButton("–°–≤–æ—ë")
    keyboard.add(meeting_button, logistics_button, hotel_button, routes_button, culture_button, own_button)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, get_request, full_name=full_name, status=status, season=season, phone=phone, dates=dates, user_id=message.from_user.id)

def get_request(message, full_name, status, season, phone, dates, user_id):
    user_info = bot.get_chat(user_id)
    username = user_info.username
    if username is None:
        username = user_ratings.get(user_id, {}).get('custom_username')
    form_text = (
        "<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:</b>\n\n"
        f"–§–ò–û: {full_name}\n"
        f"–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞: {status}\n"
        f"–°–µ–∑–æ–Ω —É—á–∞—Å—Ç–∏—è: {season}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–°—Ä–æ–∫–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: {dates}\n"
        f"–ó–∞–ø—Ä–æ—Å: {message.text}\n"
        f"ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
    )

    keyboard = telebot.types.InlineKeyboardMarkup()
    button_help = telebot.types.InlineKeyboardButton(text="‚úÖ –ü–æ–º–æ—á—å", callback_data=f"help_{user_id}")
    button_partly_help = telebot.types.InlineKeyboardButton(text="‚ùì –û—Ç—á–∞—Å—Ç–∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å", callback_data=f"partly_help_{user_id}")
    keyboard.add(button_help, button_partly_help)

    try:
        bot.send_message(CHAT_ID_TO_FORWARD, form_text, parse_mode="HTML", reply_markup=keyboard)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", reply_markup=telebot.types.ReplyKeyboardRemove())
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã: {e}")

@bot.callback_query_handler(func=lambda call: True)
def callback_query_handler(call):
    username = call.from_user.username
    action, user_id = call.data.split('_')
    user_id = int(user_id)

    if action == "help" or action == "partly_help":
        if not is_allowed_user(username):
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—ã.")
            return

        respondent_username = call.from_user.username
        respondent_rating = get_user_rating(respondent_username)
        stars = rating_to_stars(respondent_rating)

        keyboard = telebot.types.InlineKeyboardMarkup()
        accept_button = telebot.types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–º–æ—â—å", callback_data=f"accept_{action}_{respondent_username}_{user_id}")
        keyboard.add(accept_button)

        notification_text = (
            f"–ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –¥–µ–∂—É—Ä–Ω—ã–π!\n"
            f"–ï–≥–æ —Ä–µ–π—Ç–∏–Ω–≥: {stars}\n"
            f"–û–Ω {'–≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å' if action == 'help' else '–æ—Ç—á–∞—Å—Ç–∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å'}.  –ü—Ä–∏–Ω—è—Ç—å –ø–æ–º–æ—â—å?"
        )
        try:
            bot.send_message(user_id, notification_text, reply_markup=keyboard)
            bot.answer_callback_query(call.id, "–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∞–Ω–∫–µ—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_"))
def handle_accept_decline(call):
    try:
        data = call.data.split('_')
        action = data[0]
        help_type = data[1]
        respondent_username = data[2]
        user_id = int(data[3])

        respondent_rating = get_user_rating(respondent_username)

        try:
            user_info = bot.get_chat(user_id)
            requester_username = user_info.username
            requester_username_tg = user_info.username if user_info.username else '–Ω–µ —É–∫–∞–∑–∞–Ω' #–ü–æ–ª—É—á–∞–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            requester_username = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username"
            requester_username_tg = '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'

        accept_text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{requester_username} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –ø–æ–º–æ—â—å ({'–ø–æ–ª–Ω—É—é' if help_type == 'help' else '—á–∞—Å—Ç–∏—á–Ω—É—é'}).  "
                       f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")
        keyboard = telebot.types.InlineKeyboardMarkup()
        finish_button = telebot.types.InlineKeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data=f"finish_{respondent_username}_{user_id}")
        keyboard.add(finish_button)

        try:
            accepted_helps[user_id] = respondent_username
            bot.send_message(bot.get_chat(username=respondent_username).id,
                             f"–ù–∞ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å! Telegram –¥–ª—è —Å–≤—è–∑–∏: @{requester_username_tg}",
                             reply_markup=keyboard)
            bot.answer_callback_query(call.id, "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–º–æ—â—å. –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–º–æ—â–Ω–∏–∫—É.")
            bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    except Exception as e:
        print(f"Error in handle_accept_decline: {e}  call.data = {call.data}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("finish_"))
def handle_finish(call):
    try:
        data = call.data.split('_')
        respondent_username = data[1]
        user_id = int(data[2])
        bot.send_message(user_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ @{respondent_username}:")
        bot.register_next_step_handler(call.message, get_review, respondent_username=respondent_username, user_id=user_id)
    except Exception as e:
        print(f"Error in handle_finish: {e}")

def get_review(message, respondent_username, user_id):
    review_text = message.text
    keyboard = telebot.types.InlineKeyboardMarkup()
    button1 = telebot.types.InlineKeyboardButton(text="1", callback_data=f"review_1_{respondent_username}")
    button2 = telebot.types.InlineKeyboardButton(text="2", callback_data=f"review_2_{respondent_username}")
    button3 = telebot.types.InlineKeyboardButton(text="3", callback_data=f"review_3_{respondent_username}")
    button4 = telebot.types.InlineKeyboardButton(text="4", callback_data=f"review_4_{respondent_username}")
    button5 = telebot.types.InlineKeyboardButton(text="5", callback_data=f"review_5_{respondent_username}")
    keyboard.add(button1, button2, button3, button4, button5)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –ø–æ–º–æ—â—å –æ—Ç 1 –¥–æ 5:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("review_"))
def handle_review_rating(call):
    rating = int(call.data.split('_')[1])
    respondent_username = call.data.split('_')[2]
    add_review(respondent_username, call.message.text, rating)
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

def handler(event, context):
    try:
        bot.process_new_updates([telebot.types.Update.de_json(event['body'])])
        return {
            'statusCode': 200,
            'body': 'ok',
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handler: {e}")
        return {
            'statusCode': 500,
            'body': f"Error: {e}"
        }

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ.  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    bot.infinity_polling()